// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/stock/stock.proto

package go_micro_secbuy_srv_stock

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StockService service

type StockService interface {
	CreateCommodity(ctx context.Context, in *Commodity, opts ...client.CallOption) (*Response, error)
	GetCommodity(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error)
	Sell(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error)
}

type stockService struct {
	c    client.Client
	name string
}

func NewStockService(name string, c client.Client) StockService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.secbuy.srv.stock"
	}
	return &stockService{
		c:    c,
		name: name,
	}
}

func (c *stockService) CreateCommodity(ctx context.Context, in *Commodity, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "StockService.CreateCommodity", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) GetCommodity(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "StockService.GetCommodity", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) Sell(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "StockService.Sell", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockService service

type StockServiceHandler interface {
	CreateCommodity(context.Context, *Commodity, *Response) error
	GetCommodity(context.Context, *GetRequest, *Response) error
	Sell(context.Context, *GetRequest, *Response) error
}

func RegisterStockServiceHandler(s server.Server, hdlr StockServiceHandler, opts ...server.HandlerOption) error {
	type stockService interface {
		CreateCommodity(ctx context.Context, in *Commodity, out *Response) error
		GetCommodity(ctx context.Context, in *GetRequest, out *Response) error
		Sell(ctx context.Context, in *GetRequest, out *Response) error
	}
	type StockService struct {
		stockService
	}
	h := &stockServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockService{h}, opts...))
}

type stockServiceHandler struct {
	StockServiceHandler
}

func (h *stockServiceHandler) CreateCommodity(ctx context.Context, in *Commodity, out *Response) error {
	return h.StockServiceHandler.CreateCommodity(ctx, in, out)
}

func (h *stockServiceHandler) GetCommodity(ctx context.Context, in *GetRequest, out *Response) error {
	return h.StockServiceHandler.GetCommodity(ctx, in, out)
}

func (h *stockServiceHandler) Sell(ctx context.Context, in *GetRequest, out *Response) error {
	return h.StockServiceHandler.Sell(ctx, in, out)
}
